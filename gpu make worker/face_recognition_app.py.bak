import os
import cv2
import numpy as np
import insightface
from insightface.app import FaceAnalysis
from insightface.data import get_image as ins_get_image
import time
import pickle
import argparse
from datetime import datetime
import re
import requests
import json
import threading

# Create directories if they don't exist
os.makedirs("faces_db", exist_ok=True)
os.makedirs("face_images", exist_ok=True)  # Directory to store face images
database_file = "faces_db/face_database.pkl"
config_file = "config.json"

# Default camera settings
DEFAULT_CONFIG = {
    "camera_source": 0,  # 0 for webcam, "ip" for IP camera
    "ip_webcam_url": "http://192.168.18.197:8080/shot.jpg",
    "ip_camera_fps_limit": 15,  # Limit FPS when using IP camera to reduce network load
    "ip_camera_resize": True,    # Resize IP camera frames to improve performance
    "ip_camera_width": 640,      # Target width for IP camera frames
    "ip_camera_height": 480,     # Target height for IP camera frames
    "use_threaded_camera": True  # Use threaded camera access for better performance
}

# Load or create config
def load_config():
    """Load configuration from file or create with defaults if not exists."""
    if os.path.exists(config_file):
        try:
            with open(config_file, 'r') as f:
                config = json.load(f)
            # Ensure all keys exist, add defaults for missing ones
            for key, value in DEFAULT_CONFIG.items():
                if key not in config:
                    config[key] = value
            return config
        except Exception as e:
            print(f"Error loading config: {e}. Using defaults.")
            return DEFAULT_CONFIG.copy()
    else:
        # Create default config file
        save_config(DEFAULT_CONFIG)
        return DEFAULT_CONFIG.copy()

def save_config(config):
    """Save configuration to file."""
    with open(config_file, 'w') as f:
        json.dump(config, f, indent=4)

# Load the configuration
config = load_config()

# Initialize the FaceAnalysis application with GPU
app = FaceAnalysis(name='buffalo_l', providers=['CUDAExecutionProvider', 'CPUExecutionProvider'])
app.prepare(ctx_id=0, det_size=(640, 640))

# Thread-safe camera frame grabber
class ThreadedCamera:
    def __init__(self, source=0, is_ip_camera=False):
        self.is_ip_camera = is_ip_camera
        self.source = source
        self.fps_limit = config.get("ip_camera_fps_limit", 15) if is_ip_camera else 30
        self.resize = config.get("ip_camera_resize", True) if is_ip_camera else False
        self.target_width = config.get("ip_camera_width", 640)
        self.target_height = config.get("ip_camera_height", 480)
        
        # Initialize camera
        if not is_ip_camera:
            # For webcam
            self.cap = None
            for backend in [cv2.CAP_ANY, cv2.CAP_DSHOW, cv2.CAP_MSMF]:
                try:
                    self.cap = cv2.VideoCapture(source, backend)
                    if self.cap.isOpened():
                        print(f"Successfully opened webcam with backend {backend}")
                        break
                    else:
                        print(f"Failed to open webcam with backend {backend}")
                except Exception as e:
                    print(f"Error opening webcam with backend {backend}: {e}")
            
            if self.cap is None or not self.cap.isOpened():
                print("Error: Could not open webcam.")
                self.running = False
                return
        else:
            # For IP camera
            self.session = requests.Session()
        
        # Control variables
        self.running = True
        self.frame = None
        self.ret = False
        self.last_frame_time = 0
        
        # Start the thread
        self.thread = threading.Thread(target=self.update, daemon=True)
        self.thread.start()
    
    def update(self):
        """Continuously grab frames in a separate thread."""
        while self.running:
            if self.is_ip_camera:
                # For IP camera
                current_time = time.time()
                elapsed = current_time - self.last_frame_time
                min_interval = 1.0 / self.fps_limit
                
                # Only grab a new frame if enough time has passed
                if elapsed >= min_interval:
                    try:
                        # Send HTTP request to the IP webcam server with timeout
                        response = self.session.get(self.source, timeout=1.0)
                        # Convert the image from the response to a numpy array
                        img_array = np.array(bytearray(response.content), dtype=np.uint8)
                        # Decode the image
                        frame = cv2.imdecode(img_array, cv2.IMREAD_COLOR)
                        
                        if frame is not None:
                            # Resize the frame if needed
                            if self.resize:
                                height, width = frame.shape[:2]
                                aspect = width / height
                                
                                # Determine new dimensions maintaining aspect ratio
                                if width > height:
                                    new_width = min(width, self.target_width)
                                    new_height = int(new_width / aspect)
                                else:
                                    new_height = min(height, self.target_height)
                                    new_width = int(new_height * aspect)
                                
                                # Resize the frame
                                frame = cv2.resize(frame, (new_width, new_height), interpolation=cv2.INTER_AREA)
                            
                            self.frame = frame
                            self.ret = True
                            self.last_frame_time = current_time
                    except Exception as e:
                        self.ret = False
                        print(f"Error accessing IP camera: {e}")
                
                # Avoid maxing out CPU
                time.sleep(0.01)
            else:
                # For webcam
                if self.cap and self.cap.isOpened():
                    self.ret, self.frame = self.cap.read()
                else:
                    self.ret = False
                    print("Webcam is not opened")
                    time.sleep(0.1)
    
    def read(self):
        """Return the most recent frame."""
        return self.ret, self.frame.copy() if self.ret and self.frame is not None else None
    
    def release(self):
        """Stop the thread and release resources."""
        self.running = False
        if self.thread.is_alive():
            self.thread.join(timeout=1.0)
        
        if not self.is_ip_camera and self.cap and self.cap.isOpened():
            self.cap.release()

# Global camera object
camera = None

def get_camera_frame():
    """Get a frame from the configured camera source."""
    global camera
    
    camera_source = config["camera_source"]
    use_threaded = config.get("use_threaded_camera", True)
    
    # Initialize camera if not already done
    if camera is None:
        if use_threaded:
            # Use threaded camera
            if camera_source == "ip":
                camera = ThreadedCamera(config["ip_webcam_url"], is_ip_camera=True)
            else:
                camera = ThreadedCamera(camera_source, is_ip_camera=False)
        else:
            # Legacy camera access (non-threaded)
            if camera_source == "ip":
                # We'll handle this in the if branch below
                pass
            else:
                # For webcam
                get_camera_frame.cap = None
                webcam_index = 0 if not isinstance(camera_source, int) else camera_source
                
                for backend in [cv2.CAP_ANY, cv2.CAP_DSHOW, cv2.CAP_MSMF]:
                    try:
                        get_camera_frame.cap = cv2.VideoCapture(webcam_index, backend)
                        if get_camera_frame.cap.isOpened():
                            print(f"Successfully opened webcam with backend {backend}")
                            break
                        else:
                            print(f"Failed to open webcam with backend {backend}")
                    except Exception as e:
                        print(f"Error opening webcam with backend {backend}: {e}")
    
    # Get frame from camera
    if use_threaded and camera is not None:
        return camera.read()
    else:
        # Legacy camera access (non-threaded)
        if camera_source == "ip":
            # IP camera - use existing implementation
            current_time = time.time()
            if hasattr(get_camera_frame, "last_ip_frame_time"):
                elapsed = current_time - get_camera_frame.last_ip_frame_time
                fps_limit = config.get("ip_camera_fps_limit", 15)
                min_interval = 1.0 / fps_limit
                
                if elapsed < min_interval and hasattr(get_camera_frame, "last_ip_frame"):
                    return True, get_camera_frame.last_ip_frame.copy()
            
            try:
                if not hasattr(get_camera_frame, "session"):
                    get_camera_frame.session = requests.Session()
                
                ip_url = config["ip_webcam_url"]
                response = get_camera_frame.session.get(ip_url, timeout=1.0)
                img_array = np.array(bytearray(response.content), dtype=np.uint8)
                frame = cv2.imdecode(img_array, cv2.IMREAD_COLOR)
                
                if config.get("ip_camera_resize", True) and frame is not None:
                    target_width = config.get("ip_camera_width", 640)
                    target_height = config.get("ip_camera_height", 480)
                    
                    height, width = frame.shape[:2]
                    aspect = width / height
                    
                    if width > height:
                        new_width = min(width, target_width)
                        new_height = int(new_width / aspect)
                    else:
                        new_height = min(height, target_height)
                        new_width = int(new_height * aspect)
                    
                    frame = cv2.resize(frame, (new_width, new_height), interpolation=cv2.INTER_AREA)
                
                get_camera_frame.last_ip_frame = frame.copy()
                get_camera_frame.last_ip_frame_time = current_time
                
                return True, frame
            except Exception as e:
                print(f"Error accessing IP camera: {e}")
                return False, None
        else:
            # Webcam
            if not hasattr(get_camera_frame, "cap") or get_camera_frame.cap is None:
                print("Error: Webcam not initialized.")
                return False, None
            
            if not get_camera_frame.cap.isOpened():
                print("Error: Could not open webcam.")
                return False, None
                
            return get_camera_frame.cap.read()

def release_camera():
    """Release camera resources."""
    global camera
    
    if camera is not None:
        camera.release()
        camera = None
    elif hasattr(get_camera_frame, "cap") and get_camera_frame.cap is not None:
        get_camera_frame.cap.release()
        get_camera_frame.cap = None

def sanitize_filename(name):
    """Convert a name to a valid filename by removing invalid characters."""
    # Replace spaces with underscores and remove invalid filename characters
    sanitized = re.sub(r'[\\/*?:"<>|]', "", name)
    sanitized = sanitized.replace(" ", "_").lower()
    return sanitized

def add_face(name=None):
    """Add a new face to the database."""
    if name is None:
        name = input("Enter the name of the person: ")
    
    # Sanitize the name for filename and directory
    safe_name = sanitize_filename(name)
    
    # Create directory for this person if it doesn't exist
    person_dir = os.path.join("face_images", safe_name)
    os.makedirs(person_dir, exist_ok=True)
    
    # Get camera info for metadata
    camera_source = config["camera_source"]
    camera_info = "Webcam" if camera_source != "ip" else f"IP Camera ({config['ip_webcam_url']})"
    
    print(f"Adding face for {name}...")
    print("Position your face in front of the camera and press SPACE to capture.")
    print("Press ESC to cancel.")
    
    face_count = 0
    
    try:
        while True:
            # Get frame from camera
            ret, frame = get_camera_frame()
            
            if not ret:
                print("Error: Failed to grab frame from camera. Check your camera connection.")
                time.sleep(1)
                continue
            
            # Create a copy of the frame to draw on
            display_frame = frame.copy()
            
            # Run face detection
            faces = app.get(frame)
            
            # Display guide text
            if len(faces) == 0:
                msg = "No face detected. Position your face in the frame."
                color = (0, 0, 255)  # Red
            elif len(faces) > 1:
                msg = "Multiple faces detected. Please ensure only one face is visible."
                color = (0, 0, 255)  # Red
            else:
                msg = "Face detected. Press SPACE to capture."
                color = (0, 255, 0)  # Green
                # Draw box around detected face
                bbox = faces[0].bbox.astype(int)
                cv2.rectangle(display_frame, (bbox[0], bbox[1]), (bbox[2], bbox[3]), color, 2)
            
            # Display status message
            cv2.putText(display_frame, msg, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, color, 2)
            
            # Display user name
            cv2.putText(display_frame, f"Name: {name}", (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
            
            # Display camera source
            camera_type = "Webcam" if camera_source != "ip" else "IP Camera"
            cv2.putText(display_frame, f"Source: {camera_type}", (10, 90), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
            
            # Display frame count if any faces have been added
            if face_count > 0:
                cv2.putText(display_frame, f"Faces captured: {face_count}", (10, 120), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
            
            # Display instructions at the bottom
            cv2.putText(display_frame, "SPACE: Capture face", (10, display_frame.shape[0] - 40),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
            cv2.putText(display_frame, "ESC: Cancel", (10, display_frame.shape[0] - 10),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
            
            # Display the frame
            cv2.imshow("Add Face - " + name, display_frame)
            
            key = cv2.waitKey(1) & 0xFF
            if key == 27:  # ESC
                print("Face addition cancelled.")
                break
            elif key == 32:  # SPACE
                if len(faces) == 1:
                    face_embedding = faces[0].normed_embedding
                    
                    # Generate timestamp and formatted date for file naming
                    now = datetime.now()
                    timestamp = now.strftime("%Y%m%d_%H%M%S")
                    date_formatted = now.strftime("%Y-%m-%d")
                    time_formatted = now.strftime("%H-%M-%S")
                    
                    # Count number of existing samples for this person to create a sequential ID
                    existing_samples = 0
                    if os.path.exists(database_file):
                        with open(database_file, 'rb') as f:
                            face_db = pickle.load(f)
                            if safe_name in face_db:
                                existing_samples = len(face_db[safe_name]["embeddings"])
                    
                    sample_id = existing_samples + 1
                    
                    # Create structured filename:
                    # Format: {name}_{date}_{time}_{sample_id}.jpg
                    face_filename = f"{safe_name}_{date_formatted}_{time_formatted}_sample{sample_id:03d}.jpg"
                    face_path = os.path.join(person_dir, face_filename)
                    
                    # Extract face from the frame
                    bbox = faces[0].bbox.astype(int)
                    # Ensure bbox is within image boundaries
                    bbox[0] = max(0, bbox[0] - 20)  # Add some margin
                    bbox[1] = max(0, bbox[1] - 20)
                    bbox[2] = min(frame.shape[1], bbox[2] + 20)
                    bbox[3] = min(frame.shape[0], bbox[3] + 20)
                    face_img = frame[bbox[1]:bbox[3], bbox[0]:bbox[2]]
                    
                    # Save the extracted face image
                    cv2.imwrite(face_path, face_img)
                    
                    # Also save the full frame with face highlighted
                    frame_filename = f"{safe_name}_{date_formatted}_{time_formatted}_full_sample{sample_id:03d}.jpg"
                    frame_path = os.path.join(person_dir, frame_filename)
                    
                    # Draw a rectangle around the face
                    cv2.rectangle(frame, (bbox[0], bbox[1]), (bbox[2], bbox[3]), (0, 255, 0), 2)
                    cv2.putText(frame, name, (bbox[0], bbox[1] - 10),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
                    cv2.imwrite(frame_path, frame)
                    
                    # Create metadata file with human-readable info
                    metadata_filename = f"{safe_name}_{date_formatted}_{time_formatted}_sample{sample_id:03d}.txt"
                    metadata_path = os.path.join(person_dir, metadata_filename)
                    with open(metadata_path, 'w') as f:
                        f.write(f"Name: {name}\n")
                        f.write(f"Date/Time: {now.strftime('%Y-%m-%d %H:%M:%S')}\n")
                        f.write(f"Sample ID: {sample_id}\n")
                        f.write(f"Face image: {face_filename}\n")
                        f.write(f"Full image: {frame_filename}\n")
                        f.write(f"Camera source: {camera_info}\n")
                    
                    # Load existing database if it exists
                    face_db = {}
                    if os.path.exists(database_file):
                        with open(database_file, 'rb') as f:
                            face_db = pickle.load(f)
                    
                    # Add the face to the database with image path reference
                    if safe_name in face_db:
                        face_db[safe_name]["embeddings"].append((face_embedding, timestamp))
                        face_db[safe_name]["image_paths"].append(face_path)
                        face_db[safe_name]["sample_ids"].append(sample_id)
                        face_db[safe_name]["display_name"] = name  # Store original name with proper case
                    else:
                        face_db[safe_name] = {
                            "embeddings": [(face_embedding, timestamp)],
                            "image_paths": [face_path],
                            "sample_ids": [sample_id],
                            "display_name": name  # Store original name with proper case
                        }
                    
                    # Save the updated database
                    with open(database_file, 'wb') as f:
                        pickle.dump(face_db, f)
                    
                    face_count += 1
                    
                    # Capture success image
                    cv2.putText(display_frame, "Face captured successfully!", 
                               (frame.shape[1]//2 - 200, frame.shape[0]//2),
                               cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
                    cv2.imshow("Add Face - " + name, display_frame)
                    cv2.waitKey(1500)  # Show success message for 1.5 seconds
                    
                    print(f"Face for {name} added successfully!")
                    print(f"Face image saved to: {face_path}")
                    print(f"Total faces for {name}: {len(face_db[safe_name]['embeddings'])}")
                    
                    # Ask if the user wants to add another sample
                    another = input("Do you want to add another face sample for this person? (y/n): ").strip().lower()
                    if another != 'y':
                        break
                elif len(faces) > 1:
                    print("Error: Multiple faces detected. Please ensure only one face is visible.")
                else:
                    print("Error: No face detected. Please try again.")
        
    except Exception as e:
        print(f"Error during face capture: {e}")
        import traceback
        traceback.print_exc()
    
    # Release camera resources
    release_camera()
    cv2.destroyAllWindows()
    
    return face_count > 0  # Return True if at least one face was added

def realtime_recognition():
    """Real-time face recognition from video feed."""
    # Check if database exists and load it
    if not os.path.exists(database_file):
        print("No face database found. Please add faces first.")
        return
    
    with open(database_file, 'rb') as f:
        face_db = pickle.load(f)
    
    if not face_db:
        print("Face database is empty. Please add faces first.")
        return
    
    # Display database info
    print(f"Loaded database with {len(face_db)} identities:")
    for db_name, data in face_db.items():
        display_name = data.get("display_name", db_name)  # Use display_name if available
        samples = len(data["embeddings"])
        print(f"  - {display_name}: {samples} face samples")
    
    # Print camera info
    camera_source = config["camera_source"]
    camera_type = "Webcam" if camera_source != "ip" else "IP Camera"
    print(f"Using {camera_type}")
    
    if camera_source == "ip":
        print(f"IP Camera URL: {config['ip_webcam_url']}")
        print(f"FPS Limit: {config.get('ip_camera_fps_limit', 15)}")
        if config.get("ip_camera_resize", True):
            print(f"Resizing to: {config.get('ip_camera_width', 640)}x{config.get('ip_camera_height', 480)}")
        if config.get("use_threaded_camera", True):
            print("Using threaded camera access for better performance")
    
    print("Starting real-time recognition. Press ESC to exit.")
    
    # Initialize timing variables for FPS calculation
    frame_count = 0
    start_time = time.time()
    fps = 0
    
    last_recognition_time = 0
    recognition_interval = 0.1  # Process recognition every 100ms
    
    try:
        while True:
            # Get a frame from the video source
            ret, frame = get_camera_frame()
            
            if not ret:
                print("Error getting frame. Check camera connection.")
                break
            
            # Create a copy of the frame to draw on
            display = frame.copy()
            
            # Only run face detection and recognition at certain intervals to improve performance
            current_time = time.time()
            should_process = current_time - last_recognition_time >= recognition_interval
            
            if should_process:
                # Detect and analyze faces
                faces = app.get(frame)
                last_recognition_time = current_time
                
                # Process each detected face
                for face in faces:
                    # Get face embedding
                    current_embedding = face.normed_embedding
                    
                    # Check against the database
                    best_match_name = "Unknown"
                    best_match_score = 0
                    best_match_sample_id = None
                    
                    for db_name, data in face_db.items():
                        for idx, emb_data in enumerate(data["embeddings"]):
                            embedding = emb_data[0]  # The embedding is stored as a tuple (embedding, timestamp)
                            similarity = np.dot(current_embedding, embedding)
                            
                            if similarity > best_match_score and similarity > 0.5:  # Threshold for similarity
                                best_match_score = similarity
                                # Use display_name if available, otherwise use db_name
                                best_match_name = data.get("display_name", db_name)
                                if "sample_ids" in data and idx < len(data["sample_ids"]):
                                    best_match_sample_id = data["sample_ids"][idx]
                    
                    # Get bounding box coordinates
                    bbox = face.bbox.astype(np.int32)
                    x1, y1, x2, y2 = bbox
                    
                    # Draw bounding box with appropriate color
                    color = (0, 255, 0) if best_match_name != "Unknown" else (0, 0, 255)
                    cv2.rectangle(display, (x1, y1), (x2, y2), color, 2)
                    
                    # Add name and confidence score
                    score_text = f"{best_match_score:.2f}" if best_match_name != "Unknown" else ""
                    sample_text = f"(#{best_match_sample_id})" if best_match_sample_id else ""
                    label = f"{best_match_name} {score_text} {sample_text}"
                    cv2.putText(display, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
            
            # Calculate FPS
            frame_count += 1
            elapsed_time = time.time() - start_time
            if elapsed_time >= 1.0:  # Update FPS every second
                fps = frame_count / elapsed_time
                frame_count = 0
                start_time = time.time()
            
            # Display FPS
            cv2.putText(display, f"FPS: {fps:.2f}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            
            # Display camera source
            source_text = f"Source: {camera_type}"
            cv2.putText(display, source_text, (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            
            # Display FPS limit for IP camera
            if camera_source == "ip":
                limit_text = f"FPS Limit: {config.get('ip_camera_fps_limit', 15)}"
                cv2.putText(display, limit_text, (10, 90), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            
            # Show exit instruction
            cv2.putText(display, "Press ESC to exit", (10, display.shape[0] - 20), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            
            # Display the resulting frame
            cv2.imshow('Face Recognition', display)
            
            # Check for exit key
            key = cv2.waitKey(1) & 0xFF
            if key == 27:  # ESC key
                break
            
    except Exception as e:
        print(f"Error during recognition: {e}")
    finally:
        # Clean up
        release_camera()
        cv2.destroyAllWindows()

def terminal_menu():
    """Display a simple terminal-based menu for the user to select options."""
    while True:
        camera_source = config["camera_source"]
        camera_info = "Webcam" if camera_source == 0 else "IP Camera"
        
        print("\n===== Face Recognition System =====")
        print(f"Camera Source: {camera_info}")
        print("1. Add Face")
        print("2. Real-time Recognition")
        print("3. Camera Settings")
        print("4. Exit")
        print("==================================")
        
        choice = input("Enter your choice (1-4): ").strip()
        
        if choice == '1':
            add_face()
        elif choice == '2':
            realtime_recognition()
        elif choice == '3':
            change_camera_source()
        elif choice == '4':
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please enter a number between 1 and 4.")

def change_camera_source():
    """Change the camera source between webcam and IP camera."""
    global camera
    
    print("\n===== Camera Configuration =====")
    print(f"Current camera source: {'Webcam' if config['camera_source'] == 0 else 'IP Camera'}")
    print("Options:")
    print("1. Use laptop webcam")
    print("2. Use IP webcam (phone camera)")
    print("3. Configure IP webcam settings")
    print("4. Back to main menu")
    
    choice = input("Enter your choice (1-4): ").strip()
    
    if choice == "1":
        # Release existing camera if any
        release_camera()
        config["camera_source"] = 0
        print("Changed to laptop webcam")
        
        # Test the new camera source
        print("Testing camera connection...")
        ret, _ = get_camera_frame()
        if not ret:
            print("Warning: Could not connect to the webcam.")
            print("The configuration has been saved, but you may need to check your camera.")
        else:
            print("Camera connection successful!")
        
        # Save the updated configuration
        save_config(config)
        print("Camera configuration saved.")
    
    elif choice == "2":
        # Release existing camera if any
        release_camera()
        config["camera_source"] = "ip"
        print(f"Changed to IP webcam: {config['ip_webcam_url']}")
        
        # Test the new camera source
        print("Testing camera connection...")
        ret, _ = get_camera_frame()
        if not ret:
            print("Warning: Could not connect to the IP camera.")
            print("The configuration has been saved, but you may need to check your camera.")
        else:
            print("Camera connection successful!")
        
        # Save the updated configuration
        save_config(config)
        print("Camera configuration saved.")
    
    elif choice == "3":
        configure_ip_camera()
    
    elif choice == "4":
        return
    
    else:
        print("Invalid choice. Please enter a number between 1 and 4.")

def configure_ip_camera():
    """Configure IP camera settings."""
    while True:
        print("\n===== IP Camera Configuration =====")
        print(f"1. IP Camera URL: {config['ip_webcam_url']}")
        print(f"2. FPS Limit: {config.get('ip_camera_fps_limit', 15)}")
        print(f"3. Resize Frames: {config.get('ip_camera_resize', True)}")
        print(f"4. Threaded Camera: {config.get('use_threaded_camera', True)}")
        
        if config.get("ip_camera_resize", True):
            print(f"5. Target Resolution: {config.get('ip_camera_width', 640)}x{config.get('ip_camera_height', 480)}")
        
        print("6. Save and return")
        
        choice = input("Enter your choice (1-6): ").strip()
        
        if choice == "1":
            new_url = input("Enter IP camera URL (e.g., http://192.168.1.100:8080/shot.jpg): ").strip()
            if new_url.startswith("http"):
                config["ip_webcam_url"] = new_url
                print(f"IP camera URL updated to: {new_url}")
            else:
                print("Invalid URL. Please enter a valid URL starting with 'http'.")
        
        elif choice == "2":
            try:
                new_fps = int(input("Enter FPS limit (5-30 recommended): ").strip())
                if 1 <= new_fps <= 60:
                    config["ip_camera_fps_limit"] = new_fps
                    print(f"FPS limit updated to: {new_fps}")
                else:
                    print("Invalid value. Please enter a number between 1 and 60.")
            except ValueError:
                print("Invalid input. Please enter a number.")
        
        elif choice == "3":
            current = config.get("ip_camera_resize", True)
            config["ip_camera_resize"] = not current
            status = "enabled" if not current else "disabled"
            print(f"Frame resizing {status}.")
        
        elif choice == "4":
            current = config.get("use_threaded_camera", True)
            config["use_threaded_camera"] = not current
            status = "enabled" if not current else "disabled"
            print(f"Threaded camera {status}.")
        
        elif choice == "5" and config.get("ip_camera_resize", True):
            try:
                width = int(input("Enter target width (320-1920): ").strip())
                height = int(input("Enter target height (240-1080): ").strip())
                
                if 320 <= width <= 1920 and 240 <= height <= 1080:
                    config["ip_camera_width"] = width
                    config["ip_camera_height"] = height
                    print(f"Target resolution updated to {width}x{height}")
                else:
                    print("Invalid resolution. Please enter values within the acceptable range.")
            except ValueError:
                print("Invalid input. Please enter numbers.")
        
        elif choice == "6":
            # Save the updated configuration
            save_config(config)
            print("IP camera configuration saved.")
            
            # Test the configuration
            if config["camera_source"] == "ip":
                print("Testing IP camera connection with new settings...")
                release_camera()  # Release any existing camera
                ret, _ = get_camera_frame()
                if ret:
                    print("IP camera connection successful with new settings!")
                else:
                    print("Warning: Could not connect to the IP camera with these settings.")
            
            break
        
        else:
            print("Invalid choice. Please try again.")

def main():
    """Main function to run the application."""
    # Check if arguments are provided
    if len(os.sys.argv) > 1:
        # Parse command line arguments for backward compatibility
        parser = argparse.ArgumentParser(description="Face Recognition Application")
        parser.add_argument("--mode", choices=["add", "recognize"], required=True,
                            help="Mode to run: 'add' to add faces, 'recognize' for real-time recognition")
        parser.add_argument("--name", help="Name for the face when using 'add' mode", default=None)
        parser.add_argument("--camera", choices=["0", "webcam", "ip", "phone"],
                            help="Camera source: '0'/'webcam' for laptop webcam, 'ip'/'phone' for IP camera", default=None)
        parser.add_argument("--ip-url", help="URL for the IP webcam if using 'ip' camera source", default=None)
        parser.add_argument("--fps-limit", type=int, help="FPS limit for IP camera (default: 10)", default=None)
        
        args = parser.parse_args()
        
        # Update camera source if provided
        if args.camera is not None:
            if args.camera in ["0", "webcam"]:
                config["camera_source"] = 0
            elif args.camera in ["ip", "phone"]:
                config["camera_source"] = "ip"
            
            # Update IP URL if provided
            if args.ip_url:
                config["ip_webcam_url"] = args.ip_url
                
            # Update FPS limit if provided
            if args.fps_limit:
                config["ip_camera_fps_limit"] = args.fps_limit
                
            save_config(config)
        
        if args.mode == "add":
            add_face(args.name)
        elif args.mode == "recognize":
            realtime_recognition()
    else:
        # Display terminal menu interface if no arguments are provided
        terminal_menu()

if __name__ == "__main__":
    main() 